stages:
  - unit_test
  - integration_test
  - docker_build_publish

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

.test:
  image: python:alpine3.20
  cache:
    key: mycache
    paths:  
      - .venv/lib
  before_script:
    - python -m venv .venv # Create virtual environment inside the .venv directory
    - source .venv/bin/activate # Activate the environment
    - python -m pip install --upgrade pip
    - python -m pip install -r ./app/requirements.txt
    - python -m pip install pytest

unit_test:
  stage: unit_test
  extends: .test
  script:
    - python -m pytest app/tests/unit_test.py -v
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

unit and integration_test:
  stage: integration_test
  extends: .test
  script:
    - python -m pytest --cov=app --cov-report=xml:app/reports/coverage.xml --cov-report=html:app/reports/htmlcov app/tests/ -v
  artifacts:
    paths:
      - ./app/reports
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

lint_pr:
  stage: unit_test
  image: node:18
  script:
    - npm install --no-save @commitlint/config-conventional @commitlint/cli
    - git fetch origin master
    - npx commitlint --from=origin/master --to=HEAD
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build_and_publish:
  stage: docker_build_publish
  image: docker:28
  services:
    - docker:28-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker buildx create --use
    - export DOCKER_BUILDKIT=1
  script: 
    - >
      docker buildx build -t $IMAGE_TAG -f ./app/Dockerfile 
      --cache-from=type=registry,ref=$CI_REGISTRY_IMAGE:buildcache 
      --cache-to=type=registry,ref=$CI_REGISTRY_IMAGE:buildcache,mode=max 
      --push ./app
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  
