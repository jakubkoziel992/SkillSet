stages:
  - unit_test
  - post_merge_tests
  - semantic_release
  - docker_build_publish

.test:
  image: python:alpine3.20
  cache:
    key: mycache
    paths:  
      - .venv/lib
  before_script:
    - python -m venv .venv # Create virtual environment inside the .venv directory
    - source .venv/bin/activate # Activate the environment
    - python -m pip install --upgrade pip
    - python -m pip install -r ./app/requirements.txt
    - python -m pip install pytest

unit_test:
  stage: unit_test
  extends: .test
  script:
    - python -m pytest app/tests/unit_test.py -v
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

lint_pr:
  stage: unit_test
  image: node:18
  script:
    - npm install --no-save @commitlint/config-conventional @commitlint/cli
    - git fetch origin master
    - npx commitlint --from=origin/master --to=HEAD
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

post_merge_tests:
  stage: post_merge_tests
  extends: .test
  script:
    - python -m pytest --cov=app --cov-report=xml:app/reports/coverage.xml --cov-report=html:app/reports/htmlcov app/tests/ -v
  artifacts:
    paths:
      - ./app/reports
    reports:
      coverage_report:
        coverage_format: cobertura
        path: app/reports/coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"

semantic_release:
  stage: semantic_release
  image: node:20
  script:
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/commit-analyzer @semantic-release/release-notes-generator
    - npx semantic-release > semantic-release.log
    - VERSION=$(grep -oP "Published release \K[0-9]+\.[0-9]+\.[0-9]+" semantic-release.log)
    - echo $VERSION > release_version.txt
  artifacts:
    name: "app version"
    paths:
      - release_version.txt
    expire_in: 5 mins
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"
  variables:
    GITLAB_TOKEN: $GL_TOKEN

build_and_publish:
  stage: docker_build_publish
  image: docker:28
  services:
    - docker:28-dind
  dependencies:
    - semantic_release
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker buildx create --use
    - export DOCKER_BUILDKIT=1
    - export VERSION=$(cat release_version.txt)
  script: 
    - >
      docker buildx build -t $CI_REGISTRY_IMAGE:$VERSION -t $CI_REGISTRY_IMAGE:latest -f ./app/Dockerfile 
      --cache-to type=local,dest=cache_image,mode=max
      --cache-from type=local,src=cache_image
      --push ./app
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"
  
