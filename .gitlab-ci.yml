stages:
  - unit_test
  - post_merge_tests
  - semantic_release
  - build_scan_publish
  - release_update

.default_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"

.test:
  image: python:alpine3.20
  cache:
    key: mycache
    paths:  
      - .venv/lib
  before_script:
    - python -m venv .venv 
    - source .venv/bin/activate 
    - python -m pip install --upgrade pip
    - python -m pip install -r ./app/requirements.txt
    - python -m pip install pytest

.unit_test:
  stage: unit_test
  extends: .test
  script:
    - python -m pytest app/tests/unit_test.py -v
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

lint_pr:
  stage: unit_test
  image: node:18
  script:
    - npm install --no-save @commitlint/config-conventional @commitlint/cli
    - git fetch origin master
    - npx commitlint --from=origin/master --to=HEAD
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.post_merge_tests:
  stage: post_merge_tests
  extends: .test
  script:
    - python -m pytest --cov=app --cov-report=xml:app/reports/coverage.xml --cov-report=html:app/reports/htmlcov app/tests/ -v
  artifacts:
    paths:
      - ./app/reports
    reports:
      coverage_report:
        coverage_format: cobertura
        path: app/reports/coverage.xml
  rules:
    - !reference [.default_rules, rules]

release:
  stage: semantic_release
  image: node:20
  script:
    - npm install --save-dev semantic-release @semantic-release/gitlab @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/git @semantic-release/changelog conventional-changelog-conventionalcommits
    - npx semantic-release > semantic-release.log
    - cat semantic-release.log
    - VERSION=$(grep -ioP "The next release version is \K[0-9]+\.[0-9]+\.[0-9]+" semantic-release.log || echo "1")
    - echo "IMAGE_TAG=$VERSION" >> tag.env
    - >
      if [[ "$VERSION" -eq 1 ]]; then echo "There was no version change"; exit 1; fi
  artifacts:
    when: on_success
    reports:
      dotenv: tag.env
    expire_in: 10 mins
  rules:
    - !reference [.default_rules, rules]
  variables:
    GITLAB_TOKEN: $GL_TOKEN

docker_build_and_publish:
  stage: build_scan_publish
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - release
  before_script:
    - echo $IMAGE_TAG
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker buildx create --use
    - export DOCKER_BUILDKIT=1
  script: 
    - >
      docker buildx build -t $CI_REGISTRY_IMAGE:$IMAGE_TAG -t $CI_REGISTRY_IMAGE:latest -f ./app/Dockerfile 
      --cache-to=type=registry,ref=$CI_REGISTRY_IMAGE:buildcache,mode=max
      --cache-from=type=registry,ref=$CI_REGISTRY_IMAGE:buildcache
      --push
      ./app
  rules:
    - !reference [.default_rules, rules]
    

.trivy_scan:
  stage: build_scan_publish
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind 
  needs:
    - job: docker_build_and_publish
      artifacts: false
    - job: release
      artifacts: true
  script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/bin v0.59.1
    - export PATH=$HOME/bin:$PATH
    #- docker pull $CI_REGISTRY_IMAGE:latest
    - trivy image $CI_REGISTRY_IMAGE:$IMAGE_TAG
  rules:
    - !reference [.default_rules, rules]

.release_update:
  stage: release_update
  image: debian:bullseye-slim
  dependencies:
    - release
  before_script:
   - apt-get update && apt-get install -y curl jq
  script:
    - curl --request GET --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/v$IMAGE_TAG" |  jq -r '.description' > markdown.md
    - echo -e "\n### Docker Image \ndocker pull registry.gitlab.com/jakubkoziel992/skillset:$IMAGE_TAG" >> markdown.md
    - DESCRIPTION=$(<markdown.md)
    - >
      curl -v -X PUT -H "PRIVATE-TOKEN:$GITLAB_API_TOKEN" 
      -H "Content-Type: application/json"
      -d "$(jq -nc --arg desc "$DESCRIPTION" '{ description: $desc }')"
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/v$IMAGE_TAG"
  rules:
    - !reference [.default_rules, rules]