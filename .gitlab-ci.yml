stages:
  - unit_test
  - post_merge_tests
  - build
  - scan
  - semantic_release
  - push
  - release_update

.test:
  image: python:alpine3.20
  cache:
    key: mycache
    paths:  
      - .venv/lib
  before_script:
    - python -m venv .venv # Create virtual environment inside the .venv directory
    - source .venv/bin/activate # Activate the environment
    - python -m pip install --upgrade pip
    - python -m pip install -r ./app/requirements.txt
    - python -m pip install pytest

unit_test:
  stage: unit_test
  extends: .test
  script:
    - python -m pytest app/tests/unit_test.py -v
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

lint_pr:
  stage: unit_test
  image: node:18
  script:
    - npm install --no-save @commitlint/config-conventional @commitlint/cli
    - git fetch origin master
    - npx commitlint --from=origin/master --to=HEAD
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

post_merge_tests:
  stage: post_merge_tests
  extends: .test
  script:
    - python -m pytest --cov=app --cov-report=xml:app/reports/coverage.xml --cov-report=html:app/reports/htmlcov app/tests/ -v
  artifacts:
    paths:
      - ./app/reports
    reports:
      coverage_report:
        coverage_format: cobertura
        path: app/reports/coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"

docker_build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker buildx create --use
    - export DOCKER_BUILDKIT=1
  script: 
    - >
      docker buildx build -t skillset:latest -f ./app/Dockerfile 
      --cache-to type=local,dest=cache_image,mode=max
      --cache-from type=local,src=cache_image
      --load
      ./app
    - docker save -o skillset_image.tar skillset:latest
  artifacts:
    paths:
      - skillset_image.tar
    expire_in: 1h
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"

trivy_scan:
  stage: scan
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind 
  dependencies:
    - docker_build
  script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/bin v0.59.1
    - export PATH=$HOME/bin:$PATH
    - docker load -i skillset_image.tar  
    - trivy image skillset:latest 
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"

release:
  stage: semantic_release
  image: node:20
  script:
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/git @semantic-release/changelog
    - npx semantic-release > semantic-release.log
    - VERSION=$(grep -ioP "The next release version is \K[0-9]+\.[0-9]+\.[0-9]+" semantic-release.log)
    - echo "IMAGE_TAG=$VERSION" >> tag.env
  artifacts:
    reports:
      dotenv: tag.env
    expire_in: 10 mins
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"
  variables:
    GITLAB_TOKEN: $GL_TOKEN

push:
  stage: push
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - docker_build
    - release
  before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - docker load -i skillset_image.tar
    - docker tag skillset:latest $CI_REGISTRY_IMAGE:latest
    - docker tag skillset:latest $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker image ls 
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        paths:
          - "app/**"
          - ".gitlab-ci.yml"

release_update:
  stage: release_update
  image: curlimages/curl:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - curl --request GET --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases"
    - >
      curl --request PUT --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" 
      --header "Content-Type: application/json"
      --data '{"description":"Gitlab Container Registry: docker pull registry.gitlab.com/jakubkoziel992/skillset:1.5.0"}'
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/v1.5.0"
    - curl --request GET --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases"